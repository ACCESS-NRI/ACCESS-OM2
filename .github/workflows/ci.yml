name: CI
on:
  pull_request:
    branches:
      # Branches that modify spack.yaml must be of the form: pre-*.*.* (ex: pre-2024.01.1)
      # in order for the PR to access the '* Prerelease' GitHub Environments.
      - 'pre-*.*.*'
    paths:
      - 'config/*.json'
      - 'spack.yaml'
jobs:
  changed:
    name: Files Changed
    runs-on: ubuntu-latest
    outputs:
      spack-yaml-changed: ${{ steps.filter.outputs.spack-yaml }}
      json-changed: ${{ steps.filter.outputs.json }}
      versions-json-changed: ${{ steps.filter.outputs.versions-json }}
    steps:
      - uses: dorny/paths-filter@v2.9.3
        id: filter
        with:
          filters: |
            spack-yaml:
              - 'spack.yaml'
            json:
              - 'config/*.json'
            versions-json:
              - 'config/versions.json'

  spack-yaml-checks:
    name: Check spack.yaml
    runs-on: ubuntu-latest
    needs:
      - changed
    if: ${{ needs.changed.outputs.spack-yaml-changed == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Projection Version Matches
        # this step checks that the versions of the packages themselves match with the
        #  names of the modules. For example, mom5@git.2023.12.12 matches with the
        #  modulefile mom5/2023.12.12 (specifically, the version strings match)
        run: |
          FAILED='false'
          DEPS=$(yq ".spack.modules.default.tcl.include | join(\" \")" spack.yaml)

          # for each of the packages (access-om2, mom5, cice5...)
          for DEP in $DEPS; do
            DEP_VER=''
            if [[ "$DEP" == "access-om2" ]]; then
              DEP_VER=$(yq ".spack.specs[]" spack.yaml | cut -c16-)
            else
              DEP_VER=$(yq ".spack.packages.\"$DEP\".require" spack.yaml | cut -c6-)
            fi

            MODULE_VER=$(yq ".spack.modules.default.tcl.projections.\"$DEP\"" spack.yaml | cut -c8-)

            if [[ "$DEP_VER" != "$MODULE_VER" ]]; then
              echo "::error::Version of dependency and projection do not match ($DEP_VER != $MODULE_VER)"
              FAILED='true'
            fi
          done
          if [[ "$FAILED" == "true" ]]; then
            exit 1
          fi

  validate:
    name: Validate JSON
    needs:
      - changed
    if: ${{ needs.changed.outputs.json-changed == 'true' }}
    uses: access-nri/actions/.github/workflows/validate-json.yml@main
    with:
      src: "config"

  check-versions-exist:
    name: Check Versions Exist
    runs-on: ubuntu-latest
    needs:
      - changed
    if: ${{ needs.changed.outputs.versions-json-changed == 'true' }}
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        id: versions
        run: |
          echo "packages=$(jq --compact-output --raw-output '."spack-packages"' ./config/versions.json)" >> $GITHUB_OUTPUT
          echo "config=$(jq --compact-output --raw-output '."spack-config"' ./config/versions.json)" >> $GITHUB_OUTPUT

      - name: Spack Packages
        uses: actions/checkout@v4
        with:
          repository: access-nri/spack-packages
          ref: ${{ steps.versions.outputs.packages }}
          path: packages

      - name: Spack Config
        uses: actions/checkout@v4
        with:
          repository: access-nri/spack-config
          ref: ${{ steps.versions.outputs.config }}
          path: config

      - name: Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          BODY: |
            This ${{ github.repository }} model will be deployed using:
            * `access-nri/spack-packages` version [`${{ steps.versions.outputs.packages-version }}`](https://github.com/ACCESS-NRI/spack-packages/releases/tag/${{ steps.versions.outputs.packages-version }})
            * `access-nri/spack-config` version [`${{ steps.versions.outputs.config-version }}`](https://github.com/ACCESS-NRI/spack-config/releases/tag/${{ steps.versions.outputs.config-version }})

            If this is not what was expected, commit changes to `config/versions.json`.
        run: gh pr comment --body '${{ env.BODY }}'

  prerelease-deploy-version:
    name: Get Prerelease Number
    runs-on: ubuntu-latest
    outputs:
      number: ${{ steps.history.outputs.commits }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Number of Commits on ${{ github.head_ref }}
        id: history
        run: echo "commits=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT

  prerelease-deploy:
    name: Deploy to Prerelease
    # This will create a `spack` environment with the name `access-om2-<version>-<commit number>`
    # For example, `access-om2-2024.01.1-3` for the deployment based on the third commit on this
    # `pre-2024.01.1` PR branch.
    needs:
      - prerelease-deploy-version
      - spack-yaml-checks
      - validate
      - check-versions-exist
    uses: access-nri/build-cd/.github/workflows/deploy-1-setup.yml@main
    with:
      type: prerelease
      version: ${{ github.head_ref }}-${{ needs.prerelease-deploy-version.outputs.number }}
    secrets: inherit
