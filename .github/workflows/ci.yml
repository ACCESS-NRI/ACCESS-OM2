name: CI
on:
  pull_request:
    branches:
      - main
    paths:
      - config/**
      - spack.yaml
jobs:
  branch-check:
    name: Branch Name Compliance Check
    # Branches that modify spack.yaml must be of the form: pre-*.*.* (ex: pre-2024.01.1)
    # in order for the PR to access the '* Prerelease' GitHub Environments.
    # We can't use regex in an `if` conditional, so we have to do more specific testing later.
    if: startsWith(github.head_ref, 'pre-')
    runs-on: ubuntu-latest
    steps:
      - name: Check
        run: |
          regex="pre-[0-9]+\.[0-9]+\.[0-9]+"
          if [[ ! ${{ github.head_ref }} =~ $regex ]]; then
            echo "::error::${{ github.head_ref }} doesn't match '$regex', so you will be unable to deploy prereleases. Please update the branch name to be in compliance."
            exit 1
          fi

  changed:
    name: Files Changed
    runs-on: ubuntu-latest
    needs:
      - branch-check
    outputs:
      spack-yaml-changed: ${{ steps.filter.outputs.spack-yaml }}
      json-changed: ${{ steps.filter.outputs.json }}
    steps:
      - uses: dorny/paths-filter@ad1ae68cd06927a8731fe67e877a2351c7a09691  #v2.9.3
        id: filter
        with:
          filters: |
            spack-yaml:
              - 'spack.yaml'
            json:
              - 'config/*.json'

  spack-yaml-checks:
    name: Check spack.yaml
    runs-on: ubuntu-latest
    needs:
      - changed
    if: ${{ needs.changed.outputs.spack-yaml-changed == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Projection Version Matches
        # this step checks that the versions of the packages themselves match with the
        #  names of the modules. For example, mom5@git.2023.12.12 matches with the
        #  modulefile mom5/2023.12.12 (specifically, the version strings match)
        run: |
          FAILED='false'
          DEPS=$(yq ".spack.modules.default.tcl.include | join(\" \")" spack.yaml)

          # for each of the packages (access-om2, mom5, cice5...)
          for DEP in $DEPS; do
            DEP_VER=''
            if [[ "$DEP" == "access-om2" ]]; then
              DEP_VER=$(yq ".spack.specs[]" spack.yaml | cut -c16-)
            else
              DEP_VER=$(yq ".spack.packages.\"$DEP\".require" spack.yaml | cut -c6-)
            fi

            MODULE_VER=$(yq ".spack.modules.default.tcl.projections.\"$DEP\"" spack.yaml | cut -c8-)

            if [[ "$DEP_VER" != "$MODULE_VER" ]]; then
              echo "::error::Version of dependency and projection do not match ($DEP_VER != $MODULE_VER)"
              FAILED='true'
            fi
          done
          if [[ "$FAILED" == "true" ]]; then
            exit 1
          fi

  validate:
    name: Validate JSON
    needs:
      - changed
    if: ${{ needs.changed.outputs.json-changed == 'true' }}
    uses: access-nri/actions/.github/workflows/validate-json.yml@main
    with:
      src: "config"

  check-versions-exist:
    name: Check Versions Exist
    runs-on: ubuntu-latest
    needs:
      - changed
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        id: versions
        run: |
          echo "packages=$(jq --compact-output --raw-output '."spack-packages"' ./config/versions.json)" >> $GITHUB_OUTPUT
          echo "config=$(jq --compact-output --raw-output '."spack-config"' ./config/versions.json)" >> $GITHUB_OUTPUT

      # The next two steps checkout the spack-{packages,config} repos to confirm that the versions in
      # versions.json exist in the repositories.
      - name: Spack Packages
        uses: actions/checkout@v4
        with:
          repository: access-nri/spack-packages
          ref: ${{ steps.versions.outputs.packages }}
          path: packages

      - name: Spack Config
        uses: actions/checkout@v4
        with:
          repository: access-nri/spack-config
          ref: ${{ steps.versions.outputs.config }}
          path: config

      - name: Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          BODY: |
            This ${{ github.repository }} model will be deployed using:
            * `access-nri/spack-packages` version [`${{ steps.versions.outputs.packages }}`](https://github.com/ACCESS-NRI/spack-packages/releases/tag/${{ steps.versions.outputs.packages }})
            * `access-nri/spack-config` version [`${{ steps.versions.outputs.config }}`](https://github.com/ACCESS-NRI/spack-config/releases/tag/${{ steps.versions.outputs.config }})

            If this is not what was expected, commit changes to `config/versions.json`.
        run: |
          gh pr checkout ${{ github.event.pull_request.number }}
          gh pr comment --body '${{ env.BODY }}'

  prerelease-deploy-version:
    name: Get Prerelease Number
    runs-on: ubuntu-latest
    needs:
      - branch-check
    outputs:
      version: ${{ steps.get-version.outputs.version-name }}
      version-build: ${{ steps.get-version-build.outputs.version-build-name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Generate Version Number
        id: get-version
        # The step generates a general version number from the branch name, looking the
        # same as a regular release build.
        # Ex. 'pre-2024.01.1' -> '2024.01.1'
        run: version-name=$(cut --delimiter '-' --field 2 <<< "${{ github.head_ref }}")

      - name: Generate Version-Build String
        id: get-version-build
        # This step generates the version number for prereleases, which given a branch
        # like `pre-<version>`, looks like: `<version>-<number of commits on this branch>`.
        # Ex. `pre-2024.10.1` with 2 commits on branch -> `2024.10.1-2`.
        run: |
          number-of-commits=$(git rev-list --count origin/main..HEAD)
          echo "version-build-name=${{ steps.get-version.outputs.version-name }}-${number-of-commits}" >> $GITHUB_OUTPUT

  update-prerelease-tag:
    name: Update Prerelease Tag ${{ needs.prerelease-deploy-version.outputs.version }}
    needs:
      - prerelease-deploy-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ needs.prerelease-deploy-version.outputs.version }} --force
          git push --tags --force


  prerelease-deploy:
    name: Deploy to Prerelease
    # This will create a `spack` environment with the name `access-om2-<version>-<commit number>`
    # For example, `access-om2-2024.01.1-3` for the deployment based on the third commit on this
    # `pre-2024.01.1` PR branch.
    needs:
      - prerelease-deploy-version
      - spack-yaml-checks
      - validate
      - check-versions-exist
    # The conditional below asserts that we should run this job as long as the result of the dependent jobs
    # are not 'failures' or 'cancelled' (aka, either 'success' or 'skipped'). Skipped jobs may be created
    # if certain files are not updated (for example, we don't need to check the validity of json if none
    # has been updated in the PR), so we should treat 'skipped' jobs as a vacuous 'success'.
    # The `always()` status function is there, because (if we do not give a different status function)
    # by default there is an implicit 'if: success()' which would short-curcuit and skip the job.
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: access-nri/build-cd/.github/workflows/deploy-1-setup.yml@main
    with:
      type: prerelease
      ref: ${{ github.head_ref }}
      version: ${{ needs.prerelease-deploy-version.outputs.version-build }}
    secrets: inherit
